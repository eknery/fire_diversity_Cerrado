x_label = all_xlabels[i],
y_label = "Species richness"
)
}
dev.off()
s_comm_data
s_comm_data
plot_glm = function(data, x, y, model,show_limits = F, show_model = F, x_label, y_label){
### predictor and response variables
pred = as.numeric(data[[x]])
resp = as.numeric(data[[y]])
### limits for bars
y_min = paste0(y, "_min")
minimal = data[[y_min]]
y_max = paste0(y, "_max")
maximum = data[[y_max]]
### get extreme values from predicor
xlim = range(pred)
xrange = xlim[2] - xlim[1]
xweight = seq(xlim[1],xlim[2], xrange/100)
newdata = as.data.frame(xweight)
colnames(newdata) = "pred"
### get predicted values
yweight = predict(
object = model,
newdata = newdata,
type="response"
)
### predicted data
pdata = cbind(xweight, yweight)
### plot
plot(
x = data[[x]],
y = data[[y]],
pch = 21,
col = "black",
bg="gray",
cex = 1.5,
xlab = x_label,
ylab = y_label
)
if(show_limits){
segments(
data[[x]], minimal,
data[[x]], maximum,
col = "gray50",
lwd = 2
)
}
if(show_model){
lines(xweight, yweight, lty=1, lwd= 2.5)
}
}
### plot model?
show_model = c(TRUE,TRUE, FALSE, FALSE)
## graphical parameter
tiff("1_plots/richness_plots.tiff",
units="cm", width=14, height=14, res=600)
par(mfrow = c(2,2))
par(mar = c(4.5, 4, 1, 1))
### plots
for(i in 1:length(all_explanatory) ){
## variables names
x = all_explanatory[i]
y = "richness"
## get variables
pred = as.numeric(s_comm_data[[x]])
resp = as.numeric(s_comm_data[[y]])
## simple model for each predictor
model = glm(resp ~ pred, poisson("sqrt"))
## plot model
plot_glm(
data = s_comm_data,
x = x,
y = y,
model = model,
show_model = show_model[i],
x_label = all_xlabels[i],
y_label = "Species richness"
)
}
dev.off()
### compute SAC
s_comm_data$sac <- scale(lag.listw(listw, s_comm_data$fisher))
### species diversity model
glm_fish1 = glm(
data = s_comm_data,
fisher ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2 + sac,
family = inverse.gaussian(link = "identity")
)
### model summary
summary(glm_fish1)
plot(glm_fish1)
shapiro.test(resid(glm_fish1))
plot_glm = function(data, x, y, model,show_limits = F, show_model = F, x_label, y_label){
### predictor and response variables
pred = as.numeric(data[[x]])
resp = as.numeric(data[[y]])
### limits for bars
y_min = paste0(y, "_min")
minimal = data[[y_min]]
y_max = paste0(y, "_max")
maximum = data[[y_max]]
### get extreme values from predicor
xlim = range(pred)
xrange = xlim[2] - xlim[1]
xweight = seq(xlim[1],xlim[2], xrange/100)
newdata = as.data.frame(xweight)
colnames(newdata) = "pred"
### get predicted values
yweight = predict(
object = model,
newdata = newdata,
type="response"
)
### predicted data
pdata = cbind(xweight, yweight)
### plot
plot(
x = data[[x]],
y = data[[y]],
pch = 21,
col = "black",
bg="gray",
cex = 1.5,
xlab = x_label,
ylab = y_label
)
if(show_limits){
segments(
data[[x]], minimal,
data[[x]], maximum,
col = "gray50",
lwd = 2
)
}
if(show_model){
lines(xweight, yweight, lty=2, lwd= 2.5)
}
}
### plot model?
show_model = c(F, F, F, F)
## graphical parameter
tiff("1_plots/fisher_plots.tiff",
units="cm", width=14, height=14, res=600)
par(mfrow = c(2,2))
par(mar = c(4.5, 4, 1, 1))
### plots
for(i in 1:length(all_explanatory) ){
## variables names
x = all_explanatory[i]
y = "fisher"
## get variables
pred = as.numeric(s_comm_data[[x]])
resp = as.numeric(s_comm_data[[y]])
## simple model for each predictor
model = glm(resp ~ pred, inverse.gaussian("identity"))
## plot model
plot_glm(
data = s_comm_data,
x = x,
y = y,
model = model,
show_model = show_model[i],
x_label = all_xlabels[i],
y_label = "Fisher's alpha"
)
}
dev.off()
### model summary
summary(glm_fish1)
### species diversity model
glm_fish1 = glm(
data = s_comm_data,
fisher ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = inverse.gaussian(link = "identity")
)
### model summary
summary(glm_fish1)
shapiro.test(resid(glm_fish1))
### species diversity model
glm_fish1 = glm(
data = s_comm_data,
fisher ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = inverse.gaussian(link = "identity")
)
### model summary
summary(glm_fish1)
## graphical parameter
tiff("1_plots/fisher_plots.tiff",
units="cm", width=14, height=14, res=600)
par(mfrow = c(2,2))
par(mar = c(4.5, 4, 1, 1))
### plots
for(i in 1:length(all_explanatory) ){
## variables names
x = all_explanatory[i]
y = "fisher"
## get variables
pred = as.numeric(s_comm_data[[x]])
resp = as.numeric(s_comm_data[[y]])
## simple model for each predictor
model = glm(resp ~ pred, inverse.gaussian("identity"))
## plot model
plot_glm(
data = s_comm_data,
x = x,
y = y,
model = model,
show_model = show_model[i],
x_label = all_xlabels[i],
y_label = "Fisher's alpha"
)
}
dev.off()
### plot model?
show_model = c(T, T, F, F)
## graphical parameter
tiff("1_plots/fisher_plots.tiff",
units="cm", width=14, height=14, res=600)
par(mfrow = c(2,2))
par(mar = c(4.5, 4, 1, 1))
### plots
for(i in 1:length(all_explanatory) ){
## variables names
x = all_explanatory[i]
y = "fisher"
## get variables
pred = as.numeric(s_comm_data[[x]])
resp = as.numeric(s_comm_data[[y]])
## simple model for each predictor
model = glm(resp ~ pred, inverse.gaussian("identity"))
## plot model
plot_glm(
data = s_comm_data,
x = x,
y = y,
model = model,
show_model = show_model[i],
x_label = all_xlabels[i],
y_label = "Fisher's alpha"
)
}
dev.off()
plot_glm = function(data, x, y, model,show_limits = F, show_model = F, x_label, y_label){
### predictor and response variables
pred = as.numeric(data[[x]])
resp = as.numeric(data[[y]])
### limits for bars
y_min = paste0(y, "_min")
minimal = data[[y_min]]
y_max = paste0(y, "_max")
maximum = data[[y_max]]
### get extreme values from predicor
xlim = range(pred)
xrange = xlim[2] - xlim[1]
xweight = seq(xlim[1],xlim[2], xrange/100)
newdata = as.data.frame(xweight)
colnames(newdata) = "pred"
### get predicted values
yweight = predict(
object = model,
newdata = newdata,
type="response"
)
### predicted data
pdata = cbind(xweight, yweight)
### plot
plot(
x = data[[x]],
y = data[[y]],
pch = 21,
col = "black",
bg="gray",
cex = 1.5,
xlab = x_label,
ylab = y_label
)
if(show_limits){
segments(
data[[x]], minimal,
data[[x]], maximum,
col = "gray50",
lwd = 2
)
}
if(show_model){
lines(xweight, yweight, lty=1, lwd= 2.5)
}
}
show_model
### plot model?
show_model = c(T, T, F, F)
## graphical parameter
tiff("1_plots/fisher_plots.tiff",
units="cm", width=14, height=14, res=600)
par(mfrow = c(2,2))
par(mar = c(4.5, 4, 1, 1))
### plots
for(i in 1:length(all_explanatory) ){
## variables names
x = all_explanatory[i]
y = "fisher"
## get variables
pred = as.numeric(s_comm_data[[x]])
resp = as.numeric(s_comm_data[[y]])
## simple model for each predictor
model = glm(resp ~ pred, inverse.gaussian("identity"))
## plot model
plot_glm(
data = s_comm_data,
x = x,
y = y,
model = model,
show_model = show_model[i],
x_label = all_xlabels[i],
y_label = "Fisher's alpha"
)
}
dev.off()
### species richness model
glm_rich1 = glm(
data = s_comm_data,
richness ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson(link = "sqrt")
)
### model summary
summary(glm_rich1)
shapiro.test(resid(glm_rich1))
### plot model?
show_model = c(TRUE,TRUE, FALSE, FALSE)
## graphical parameter
tiff("1_plots/richness_plots.tiff",
units="cm", width=14, height=14, res=600)
par(mfrow = c(2,2))
par(mar = c(4.5, 4, 1, 1))
### plots
for(i in 1:length(all_explanatory) ){
## variables names
x = all_explanatory[i]
y = "richness"
## get variables
pred = as.numeric(s_comm_data[[x]])
resp = as.numeric(s_comm_data[[y]])
## simple model for each predictor
model = glm(resp ~ pred, poisson("sqrt"))
## plot model
plot_glm(
data = s_comm_data,
x = x,
y = y,
model = model,
show_model = show_model[i],
x_label = all_xlabels[i],
y_label = "Species richness"
)
}
dev.off()
###### FIRST AXIS
hist(s_comm_data$floristic_PCo1)
### compute SAC
s_comm_data$sac <- scale(lag.listw(listw, s_comm_data$floristic_PCo1) )
### species compostion model 1
glm_comp1 = glm(
data = s_comm_data,
floristic_PCo1 ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = gaussian(link = "identity")
)
summary(glm_comp1)
shapiro.test(resid(glm_comp1) )
summary(glm_comp1)
### plot model?
show_model = c(T, F, F, F)
## graphical parameter
tiff("1_plots/pco1_plots.tiff",
units="cm", width=14, height=14, res=600)
par(mfrow = c(2,2))
par(mar = c(4.5, 4, 1, 1))
### plots
for(i in 1:length(all_explanatory) ){
## variables names
x = all_explanatory[i]
y = "floristic_PCo1"
## get variables
pred = as.numeric(s_comm_data[[x]])
resp = as.numeric(s_comm_data[[y]])
## simple model for each predictor
model = glm(resp ~ pred, gaussian("identity"))
## plot model
plot_glm(
data = s_comm_data,
x = x,
y = y,
model = model,
show_model = show_model[i],
x_label = all_xlabels[i],
y_label = "Floristic PCo1"
)
}
dev.off()
### species compostion model 1
glm_comp1 = glm(
data = s_comm_data,
floristic_PCo1 ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2 + sac,
family = gaussian(link = "identity")
)
summary(glm_comp1)
### calculate sac
s_comm_data$sac = lag.listw(listw, s_comm_data$burned)
### glm model
glm_fire1 = glm(
data = s_comm_data,
burned ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson("identity")
)
summary(glm_fire1)
shapiro.test( residuals(glm_fire1) )
### species compostion model 2
glm_comp2 = glm(
data = s_comm_data ,
floristic_PCo2 ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = gaussian(link = "identity")
)
### summary model
summary(glm_comp2)
shapiro.test(resid(glm_comp2) )
### glm model
glm_fire1 = glm(
data = s_comm_data,
burned ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson("identity")
)
summary(glm_fire1)
### glm model
glm_fire1 = glm(
data = s_comm_data,
burned ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson("logistic")
)
### glm model
glm_fire1 = glm(
data = s_comm_data,
burned ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson("log")
)
summary(glm_fire1)
shapiro.test( residuals(glm_fire1) )
### glm model
glm_fire1 = glm(
data = s_comm_data,
burned ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson("identity")
)
# log AIC 27.08
summary(glm_fire1)
### glm model
glm_fire1 = glm(
data = s_comm_data,
burned ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson("identity")
)
summary(glm_fire1)
shapiro.test( residuals(glm_fire1) )
### glm model
glm_fire1 = glm(
data = s_comm_data,
burned ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson("identity")
)
summary(glm_fire1)
### species richness model
glm_rich1 = glm(
data = s_comm_data,
richness ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson(link = "sqrt")
)
### model summary
summary(glm_rich1)
### species diversity model
glm_fish1 = glm(
data = s_comm_data,
fisher ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = inverse.gaussian(link = "identity")
)
### model summary
summary(glm_fish1)
### species compostion model 1
glm_comp1 = glm(
data = s_comm_data,
floristic_PCo1 ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = gaussian(link = "identity")
)
summary(glm_comp1)
### species compostion model 2
glm_comp2 = glm(
data = s_comm_data ,
floristic_PCo2 ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = gaussian(link = "identity")
)
### summary model
summary(glm_comp2)
### summary model
summary(glm_comp2)
### glm model
glm_fire1 = glm(
data = s_comm_data,
burned ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson("log")
)
summary(glm_fire1)
plot(glm_fire1)
shapiro.test( residuals(glm_fire1) )
